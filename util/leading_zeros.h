// Unlike the other files in this project, this file is dual licenced by the
// author under the GNU LGPL, like the rest of the project, or at the user or
// distributor's option, under the terms of the Boost Software License, as
// reproduced below:
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#ifndef UTIL_BITMATH_H
#define UTIL_BITMATH_H 1

#include <cstdint>
#include <type_traits>

namespace util {

// TODO - figure out if there's a more optimal means of making this calculation
// for modern processors. GCC issue:
//   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50168
template <typename T>
std::enable_if_t<std::is_unsigned_v<T>, T>
leading_zeros(const T & value)
{
	if constexpr (sizeof(value) <= sizeof(unsigned))
		return __builtin_clz(static_cast<unsigned>(value));
	else if constexpr (sizeof(value) <= sizeof(unsigned long))
		return __builtin_clzl(static_cast<unsigned long>(value));
	else if constexpr (sizeof(value) <= sizeof(unsigned long long))
		return __builtin_clzll(static_cast<unsigned long long>(value));
	else
		static_assert(sizeof(value) <= sizeof(unsigned long long));

	return 0;
}

} // namespace util

#endif //  UTIL_BITMATH_H
